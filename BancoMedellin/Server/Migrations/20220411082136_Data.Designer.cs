// <auto-generated />
using System;
using BancoMedellin.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BancoMedellin.Server.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220411082136_Data")]
    partial class Data
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BancoMedellin.Shared.Autorizada", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CuentaId")
                        .HasColumnType("int");

                    b.Property<decimal>("UsuarioDni")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("CuentaId");

                    b.HasIndex("UsuarioDni");

                    b.ToTable("Autorizadas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CuentaId = 3,
                            UsuarioDni = 77185581m
                        },
                        new
                        {
                            Id = 2,
                            CuentaId = 4,
                            UsuarioDni = 77185581m
                        },
                        new
                        {
                            Id = 3,
                            CuentaId = 1,
                            UsuarioDni = 11111m
                        },
                        new
                        {
                            Id = 4,
                            CuentaId = 2,
                            UsuarioDni = 11111m
                        });
                });

            modelBuilder.Entity("BancoMedellin.Shared.Cuenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("NombreCuenta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("UsuarioDni")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioDni");

                    b.ToTable("Cuentas");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 50000m,
                            NombreCuenta = "Vivienda",
                            UsuarioDni = 77185581m
                        },
                        new
                        {
                            Id = 2,
                            Balance = 90000m,
                            NombreCuenta = "Vehiculo",
                            UsuarioDni = 77185581m
                        },
                        new
                        {
                            Id = 3,
                            Balance = 90000m,
                            NombreCuenta = "Universidad",
                            UsuarioDni = 11111m
                        },
                        new
                        {
                            Id = 4,
                            Balance = 70000m,
                            NombreCuenta = "Excursion",
                            UsuarioDni = 11111m
                        },
                        new
                        {
                            Id = 5,
                            Balance = 170000m,
                            NombreCuenta = "España",
                            UsuarioDni = 22222m
                        });
                });

            modelBuilder.Entity("BancoMedellin.Shared.Transferencia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CuentaCredito")
                        .HasColumnType("int");

                    b.Property<int>("CuentaDebito")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<decimal>("UsuarioDni")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("Valor")
                        .IsConcurrencyToken()
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("CuentaCredito");

                    b.HasIndex("CuentaDebito");

                    b.HasIndex("UsuarioDni");

                    b.ToTable("Transferencias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CuentaCredito = 2,
                            CuentaDebito = 1,
                            UsuarioDni = 77185581m,
                            Valor = 30000m
                        });
                });

            modelBuilder.Entity("BancoMedellin.Shared.Usuario", b =>
                {
                    b.Property<decimal>("Dni")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Dni");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Dni = 77185581m,
                            Nombre = "German Fonseca P",
                            PasswordHash = new byte[] { 197, 190, 101, 27, 190, 140, 194, 228, 11, 195, 169, 170, 18, 141, 127, 137, 103, 114, 213, 150, 3, 72, 171, 125, 193, 49, 172, 7, 59, 161, 51, 129, 112, 62, 38, 166, 247, 233, 152, 82, 84, 134, 227, 182, 82, 86, 34, 30, 31, 34, 67, 161, 155, 41, 81, 99, 206, 131, 46, 123, 62, 238, 240, 65 },
                            PasswordSalt = new byte[] { 150, 78, 213, 227, 116, 111, 91, 207, 12, 13, 147, 223, 95, 85, 227, 46, 173, 241, 219, 98, 129, 123, 153, 97, 84, 76, 187, 216, 107, 193, 176, 231, 39, 55, 233, 224, 202, 248, 52, 15, 160, 86, 242, 164, 109, 28, 203, 200, 2, 151, 182, 19, 249, 52, 160, 72, 58, 165, 63, 146, 106, 197, 22, 22, 231, 238, 153, 223, 107, 214, 85, 23, 12, 56, 153, 197, 170, 94, 238, 14, 247, 102, 187, 62, 99, 165, 115, 201, 167, 92, 114, 33, 44, 147, 61, 165, 109, 179, 244, 81, 43, 14, 113, 224, 253, 149, 48, 205, 25, 145, 3, 127, 169, 230, 209, 111, 0, 55, 17, 105, 247, 3, 100, 23, 231, 124, 129, 98 }
                        },
                        new
                        {
                            Dni = 11111m,
                            Nombre = "Daniela Fonseca",
                            PasswordHash = new byte[] { 124, 143, 35, 142, 52, 81, 189, 83, 179, 21, 117, 100, 75, 180, 127, 9, 133, 244, 129, 64, 246, 44, 81, 29, 80, 82, 34, 163, 171, 209, 53, 39, 236, 244, 225, 150, 249, 195, 57, 194, 42, 134, 244, 84, 176, 251, 239, 228, 227, 206, 70, 188, 175, 202, 45, 125, 159, 95, 218, 150, 208, 212, 242, 150 },
                            PasswordSalt = new byte[] { 46, 232, 37, 253, 215, 47, 91, 252, 167, 227, 255, 61, 144, 158, 155, 164, 140, 209, 201, 97, 188, 14, 83, 254, 15, 3, 211, 84, 70, 124, 26, 54, 52, 67, 47, 192, 96, 252, 212, 246, 253, 12, 151, 65, 104, 78, 218, 69, 145, 64, 204, 211, 223, 75, 250, 169, 111, 1, 166, 234, 131, 96, 5, 126, 122, 6, 227, 232, 117, 184, 208, 197, 21, 63, 151, 125, 73, 123, 61, 67, 160, 94, 96, 27, 244, 153, 130, 212, 249, 31, 86, 243, 240, 71, 17, 246, 73, 26, 15, 25, 218, 203, 2, 89, 76, 85, 146, 85, 222, 154, 20, 62, 155, 231, 229, 226, 191, 88, 215, 90, 140, 246, 44, 0, 244, 235, 99, 51 }
                        },
                        new
                        {
                            Dni = 22222m,
                            Nombre = "Juan Sebastian Fonseca",
                            PasswordHash = new byte[] { 142, 143, 28, 233, 26, 251, 202, 198, 233, 87, 38, 42, 169, 8, 90, 180, 10, 20, 251, 181, 228, 126, 168, 145, 32, 175, 244, 193, 211, 202, 232, 216, 107, 63, 107, 237, 103, 145, 251, 21, 150, 38, 84, 130, 33, 79, 115, 250, 254, 91, 131, 53, 64, 19, 32, 179, 152, 99, 252, 184, 36, 207, 12, 153 },
                            PasswordSalt = new byte[] { 219, 250, 93, 171, 55, 176, 73, 196, 55, 226, 115, 206, 33, 158, 42, 127, 48, 13, 234, 144, 148, 22, 123, 62, 79, 181, 103, 152, 143, 171, 158, 43, 33, 34, 156, 247, 106, 101, 92, 217, 23, 153, 167, 149, 79, 34, 156, 222, 225, 37, 119, 51, 137, 60, 119, 165, 86, 66, 55, 8, 144, 186, 208, 242, 189, 212, 89, 168, 58, 242, 150, 131, 30, 36, 127, 151, 224, 174, 107, 45, 86, 170, 144, 17, 235, 4, 163, 97, 45, 214, 190, 184, 221, 189, 192, 27, 72, 58, 232, 95, 2, 163, 73, 102, 93, 246, 62, 240, 165, 112, 101, 141, 32, 145, 1, 63, 45, 242, 231, 10, 147, 253, 81, 102, 44, 105, 53, 109 }
                        });
                });

            modelBuilder.Entity("BancoMedellin.Shared.Autorizada", b =>
                {
                    b.HasOne("BancoMedellin.Shared.Cuenta", "Cuenta")
                        .WithMany("Autorizadas")
                        .HasForeignKey("CuentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BancoMedellin.Shared.Usuario", "Usuario")
                        .WithMany("Autorizadas")
                        .HasForeignKey("UsuarioDni")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Cuenta");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BancoMedellin.Shared.Cuenta", b =>
                {
                    b.HasOne("BancoMedellin.Shared.Usuario", "Usuario")
                        .WithMany("Cuentas")
                        .HasForeignKey("UsuarioDni")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BancoMedellin.Shared.Transferencia", b =>
                {
                    b.HasOne("BancoMedellin.Shared.Cuenta", "Debito")
                        .WithMany("TransferenciasCredito")
                        .HasForeignKey("CuentaCredito")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BancoMedellin.Shared.Cuenta", "Credito")
                        .WithMany("TransferenciasDebito")
                        .HasForeignKey("CuentaDebito")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BancoMedellin.Shared.Usuario", "Usuario")
                        .WithMany("Transferencias")
                        .HasForeignKey("UsuarioDni")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Credito");

                    b.Navigation("Debito");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BancoMedellin.Shared.Cuenta", b =>
                {
                    b.Navigation("Autorizadas");

                    b.Navigation("TransferenciasCredito");

                    b.Navigation("TransferenciasDebito");
                });

            modelBuilder.Entity("BancoMedellin.Shared.Usuario", b =>
                {
                    b.Navigation("Autorizadas");

                    b.Navigation("Cuentas");

                    b.Navigation("Transferencias");
                });
#pragma warning restore 612, 618
        }
    }
}
